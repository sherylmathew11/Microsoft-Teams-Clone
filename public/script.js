//this is our client side code that handles interacting with the server and other users
//socket.io allows us to do real time communication
//PeerJS allows us to implement WebRTC
/* Technologies used:
      Node.js
      ExpressJS
      EJS
      Socket.io
      WebRTC(w/ PeerJS)
*/
const socket = io('/'); //create our socket
const videoGrid = document.getElementById('video-grid');   //calling id #video-grid from room.ejs
//creating a peer element which represents the current user
const peer = new Peer(undefined, {                //const peer=new Peer([id],[options]): id will be generated by brokering server 
  path: '/peerjs',        // path were self hosted peer server is running                       //Ref:peerjs.com/docs.html
  host: '/',              //server host
  port: '443'            //server port
});
const peers ={}

let myVideoStream;   //let-can update, can't re-declare   //const - can't do both  //var-can do both 
const myVideo = document.createElement('video');   //creating a new video tag to show our video, styled in room.ejs
myVideo.muted = true;                              //audio of video muted so that there is no feedback loop(html media element)
navigator.mediaDevices.getUserMedia({     //prompts the user for permission to use a media input
  video: true,
  audio: true
}).then(stream => {
  // console.log('stream' +stream)
  myVideoStream = stream; //getting the video stream/user media and adding that stream to a video element
  addVideoStream(myVideo, stream) //display our video to ourselves
  peer.on('call', call => {  //when we join someone's room
    call.answer(stream); //stream them our audio/video
    const video = document.createElement('video'); //create a video tag for them
    call.on('stream', userVideoStream => { //when we receive their stream
      console.log('call worked')
      addVideoStream(video, userVideoStream) //display their video to ourslves
    })
  })
  
  // socket.emit('join-room', ROOM_ID);
  socket.on('user-connected',(userId) => { //if a new user connects
    console.log("user-connected")
    connectToNewUser(userId,stream);
  })

  let text = $("input");
  // when press enter send message
  $('html').keydown((e) =>{                                         //keypress any input
    if (e.which == 13 && text.val().length !== 0) {                 //13->enter and text=empty
      socket.emit('message', text.val());
      console.log(text.val())
      text.val('')
    }
  });
  //pass message from socket
  socket.on("createMessage", (message,check) => {
    console.log('createmesg',message);
    $('ul').append(`<li class="message"><b>${check}</b><br/>${message}</li>`);
    scrollToBottom()
  })
}).catch((err) =>{
  console.log(err.name + ": " + err.message);
});
//user disconnect from room
socket.on('user-disconnected', userId =>{
  console.log('disconnect user id', userId)
  if (peers[userId]) peers[userId].close()  
})
//when we first open the app, have us join a room
peer.on('open' , id => { 
  socket.emit('join-room', ROOM_ID, id);
})


const connectToNewUser = (userId,stream)  =>{ //this runs when someone joins our room
  const call = peer.call(userId, stream) //call the user who just joined
  console.log("connectNewUser")
  //add their video
  const video = document.createElement('video') 
  console.log('inside connectnew user')
  call.on('stream', userVideoStream => {
    console.log("stream connectuser")
    addVideoStream(video, userVideoStream)
  })
  // if they leave, remove their video
  call.on('close', () => {
    console.log("close connectuser")
    video.remove()
  })

  peers[userId] = call
}
const addVideoStream=(video, stream) => {
    video.srcObject = stream; //media stream from camera and mic is assigned to <video> element
    video.addEventListener('loadedmetadata', () => { //play the video as it loads
        video.play();
  })
  videoGrid.append(video) //append video element to videoGrid
}
//scroll chat block
const scrollToBottom = () => {
  var d = $('.main__chat_window');
  d.scrollTop(d.prop("scrollHeight"));
}
//Mute/Unmute by user
const muteUnmute = () => {
  const enabled = myVideoStream.getAudioTracks()[0].enabled;
  if (enabled) {
    myVideoStream.getAudioTracks()[0].enabled = false;
    setUnmuteButton();
  } else {
    setMuteButton();
    myVideoStream.getAudioTracks()[0].enabled = true;
  }
}
//play/stop video by user
const playStop = () => {
  console.log('object')
  let enabled = myVideoStream.getVideoTracks()[0].enabled;
  if (enabled) {
    myVideoStream.getVideoTracks()[0].enabled = false;
    setPlayVideo()
  } else {
    setStopVideo()
    myVideoStream.getVideoTracks()[0].enabled = true;
  }
}

const setMuteButton = () => {
  const html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html;
}

const setUnmuteButton = () => {
  const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html;
}

const setStopVideo = () => {
  const html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html;
}

const setPlayVideo = () => {
  const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Play Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html;
}
//Join Meeting Button function
function joinMeeting() {
  var x = document.getElementById("joinMeetingForm");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
//After URL paste - Join button redirect
function joinLink(input) {
  window.location.href= input
}